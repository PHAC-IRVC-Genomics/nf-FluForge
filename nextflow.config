// Global pipeline parameters
params {
    // User-provided paths
    consensus_dir      = ''          // Required: directory with consensus FASTA files
    output_dir         = 'results'   // Optional, default is 'results'

    // VADR model location (assumed staged in the container or local environment)
    // e.g.: "/opt/vadr-models-flu"
    vadr_model_dir     = "$baseDir/resources/vadr-models-flu-1.6.3-2.tar.gz"
    pre_table2asn      = "$baseDir/bin/sub_seqids_for_table2asn.py"
    post_table2asn     = "$baseDir/bin/post_table2asn.py"

    // Resource limits
    max_cpus           = 16
    max_memory         = '64GB'
    max_time           = '48h'

    // Nextflow pipeline metadata
    pipeline_name      = 'nf-fluforge'
    pipeline_desc      = 'A Nextflow pipeline for Influenza analysis with VADR, table2asn, tidyone, and pseudogenome assembly.'
    pipeline_version   = '0.1.0'
    nextflowVersion    = '!>=22.10.1'  // or whichever version you want to enforce

    // Logging & debugging
    monochrome_logs    = true
    help               = false
}

// Define help text
def helpText = """
${params.pipeline_name} (${params.pipeline_version})

USAGE:
  nextflow run main.nf --consensus_dir <path> --output_dir <path> -profile <docker/singularity/conda>

DESCRIPTION:
  This pipeline processes consensus Influenza FASTA files with VADR + table2asn,
  extracts and classifies segments via tidyone.py, and builds pseudogenomes (and
  optionally phylogenetic trees) with build_pseudogenome.py.

REQUIRED INPUT:
  --consensus_dir  Path to the input directory containing consensus FASTA files
                   (one per sample, e.g. SAMPLE.fasta)

OPTIONAL:
  --output_dir     Path to the output directory for results (default: results)
  --vadr_model_dir Path to a local or staged VADR model directory
                   (if omitted, pipeline will assume a default location or container path)

RESOURCE LIMITS:
  --max_cpus       Maximum number of CPUs (default: 16)
  --max_memory     Maximum memory (default: 64GB)
  --max_time       Maximum execution time (default: 48h)

MISC:
  --help           Show this help message and exit
"""

// If --help is specified, print the help text and exit
if (params.help) {
    println helpText
    System.exit(0)
}

// Validate mandatory parameters
if (!params.consensus_dir) {
    throw new IllegalArgumentException("ERROR: 'consensus_dir' is required but not specified.")
}

// Process configurations (default resources)
process {
    cpus    = { check_max(1, 'cpus') }
    memory  = { check_max('2 GB', 'memory') }
    time    = { check_max('48h', 'time') }

    // Error strategy
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'terminate' }
    maxRetries    = 1
}

// Profiles for different execution environments
profiles {

    // Docker profile
    docker {
        docker.enabled      = true
        singularity.enabled = false
        conda.enabled       = false
    }

    // Singularity profile
    singularity {
        singularity.enabled    = true
        docker.enabled         = false
        conda.enabled          = false
        singularity.autoMounts = true
    }

    // Conda profile
    conda {
        conda.enabled   = true
        docker.enabled  = false
        singularity.enabled = false
    }

    // Slurm HPC environment (if needed)
    slurm {
        process.executor = 'slurm'
        process.queue    = 'general'
    }
}

// Logging and trace settings
timeline {
    enabled   = true
    file      = "${params.output_dir}/pipeline_info/execution_timeline.html"
    overwrite = true
}
report {
    enabled   = true
    file      = "${params.output_dir}/pipeline_info/execution_report.html"
    overwrite = true
}
trace {
    enabled   = true
    file      = "${params.output_dir}/pipeline_info/execution_trace.txt"
    overwrite = true
}
dag {
    enabled   = true
    file      = "${params.output_dir}/pipeline_info/pipeline_dag.svg"
    overwrite = true
}

// Manifest metadata
manifest {
    name            = params.pipeline_name
    description     = params.pipeline_desc
    author          = 'Your Name'
    version         = params.pipeline_version
    nextflowVersion = params.nextflowVersion
}

// Function to enforce resource limits
def check_max(obj, type) {
    try {
        if (type == 'memory') {
            def maxMemory = params.max_memory as nextflow.util.MemoryUnit
            if (obj instanceof nextflow.util.MemoryUnit && obj.compareTo(maxMemory) > 0) {
                return maxMemory
            }
        }
        else if (type == 'time') {
            def maxTime = params.max_time as nextflow.util.Duration
            if (obj instanceof nextflow.util.Duration && obj.compareTo(maxTime) > 0) {
                return maxTime
            }
        }
        else if (type == 'cpus') {
            return Math.min(obj as int, params.max_cpus as int)
        }
    }
    catch (Exception e) {
        println "### ERROR ### Invalid ${type} value in check_max(): ${e.message}"
        return obj
    }
    return obj
}
